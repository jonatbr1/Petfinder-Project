import sqlite3
import pdb

'''
Questions To Ask

Profiling:
1) Geographic concentrations by breed in absolute terms, as a % of the overall breed, and % of adoptable pets in that region
2) Breed breakdown by age, sex, size, mixed
3) How many purebreds vs mutts
4) Share of the adoptable population by characteristic
5) How many similar dogs within X miles
6) For mutts, what are most common mixes i.e. a Boxer is often crossed with a Pit
'''

# Create a connection to a sqlite db
con = sqlite3.connect('/Users/jonathan.braus/Documents/Petfinder/petfinder.db')
cur = con.cursor()


# Function to remove dictionary key
def removekey(d, key):
    r = dict(d)
    del r[key]
    return r


# Build filters
def get_filters(filter_dict, params):
    # params is the list that stores all inputs for the entire query

    optional_filters = ''
    
    if bool(filter_dict['breed']): # bool(breed) is true if user specifies a breed
        optional_filters += "breeds LIKE ? AND "
        params.append('%' + filter_dict['breed'] + '%')
        
    if filter_dict['mixed'] == 'yes':
        optional_filters += "(mix=? OR breeds LIKE '%,%') AND "
        params.append(filter_dict['mixed'])

    if filter_dict['mixed'] == 'no':
        optional_filters += "(mix=? AND breeds NOT LIKE '%,%') AND "
        params.append(filter_dict['mixed'])

    if bool(filter_dict['age']):
        optional_filters += "age=? AND "
        params.append(filter_dict['age'])

    if bool(filter_dict['sex']):
        optional_filters += "sex=? AND "
        params.append(filter_dict['sex'])

    if bool(filter_dict['size']):
        optional_filters += "size=? AND "
        params.append(filter_dict['size'])

    if bool(filter_dict['zp']):
        optional_filters += "zip=? AND "
        params.append(filter_dict['zp'])

    if bool(filter_dict['msa']):
        optional_filters += "msa=? AND "
        params.append(filter_dict['msa'])

    if bool(filter_dict['state']):
        optional_filters += "state=? AND "
        params.append(filter_dict['state'])

    # Remove trailing (space)AND(space) if any optional filters specified
    optional_filters = optional_filters[:-5]

    return (optional_filters, params)




# Build a full sql query
def get_query(breed, mixed, age, sex, size, zp, msa, state, grouping, sub_query, debug):
    # breed, mixed, age, sex, size, zp, msa, state are filters
    # grouping is the field to group the output on
    # metric is the actual statistic being measured such as count, pct, etc
    # pct_field is only needed if metric = pct, represents what % is being calculated ie % of breed, % of region, etc
    # debug is for my own testing purposes, set to 0 in production
    # mixed takes values 'yes' or 'no'
    # size takes values 'S', 'M', 'L', or 'XL'
    
    filter_dict = {'breed': breed, 'mixed': mixed, 'age': age, 'sex': sex, 'size': size, 'zp': zp, 'msa': msa, 'state': state}

    # Initialize params with subquery's parameters if any exist
    if sub_query == '':
        params = []
    else:
        params = sub_query[1]

    filter_data = get_filters(filter_dict, params)

    optional_filters = filter_data[0]
    params = filter_data[1]

    # Insert a WHERE if any filters are specified
    if len(optional_filters) > 0:
        optional_filters = ' WHERE ' + optional_filters
    else:
        optional_filters = ""

    # Insert a GROUP BY if grouping is specified
    if len(grouping) > 0:
        group_by = " GROUP BY " + grouping
        comma = ","
        
    else:
        group_by = ""
        comma = ""

    # Insert denominator subquery when necessary
    if len(sub_query) > 0:
        denom = "/(" + sub_query[0] + ")"
    else:
        denom = ""

    my_query = "SELECT " + grouping + comma + "count(*)" + denom + " AS cnt FROM pets" + optional_filters + group_by

    return (my_query, params)

    """
    if debug == 1:
        cur.execute(my_query, params)        
    else:
        cur.execute(my_query, params)
    
    return cur
    """


sub_query = get_query('Shih Tzu','','','','S','','','','','',0)
final_query = get_query('Shih Tzu','','','','S','','','','zip',sub_query,0)

