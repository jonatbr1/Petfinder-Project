import requests
import hashlib
import sqlite3
import csv
import time
import pdb # Used for debugging
import functions
from lxml import etree

base_url = 'http://api.petfinder.com/'
key = '73a7bdb2d6fb6ff6fbf2ce0795109a58'
secret = '79e4470e7e285d7ff90d08b4939eb16d'


# Open a connection to the db
con = sqlite3.connect('petfinder.db')
cur = con.cursor()

# Load zips into a table and create a shelters table
functions.create_table('/Users/jonathan.braus/Desktop/zip_code_database.csv', 'zips', con, cur)
cur.execute('CREATE TABLE IF NOT EXISTS shelters (id, name, city, state, zip, lat, long, date)')

run_date = time.strftime('%x')
cur_zip = con.cursor()
zips = cur_zip.execute('SELECT * FROM zips')

for zip in zips:
    zip_str = zip[0]
    offset = 0
    while offset < 20:
        print('while zip ' + zip_str)
        # Make a shelter.find call
        full_url = base_url + 'shelter.find'
        location = zip_str
        count = 20
        params = {'key': key, 'location': location, 'offset': offset, 'count': count}
        response = requests.get(full_url, params=params)

        #Make sure API didn't throw an error
        if 'Error' not in  response.reason:

            root = etree.fromstring(response.content)
        
            # Get lastOffset value
            offset_element = root.find('lastOffset')
            if offset_element is not None and offset_element.text is not None:
                offset = int(offset_element.text)

                # Iterate through list of shelters and prep for db insert    
                shelters = root.xpath('//shelter')  # Returns a list with one entry per shelter
                data =[]
                for shelter in shelters:
                    field_list = ''
                    row_data = []
                    for field in shelter.iterchildren():
                        if field.tag in ['id', 'name', 'city', 'state', 'zip', 'latitude', 'longitude']:
                            row_data.append(functions.xstr(field.text))
                            
                    # Add run_date as the last record of row_data
                    row_data.append(run_date)
                    # Convert row_data to tuple and add it to data
                    field_list = field_list[1:]
                    data.append(tuple(row_data))
        
                # Insert pet data into pets db
                cur.executemany('INSERT INTO shelters VALUES (?, ?, ?, ?, ?, ?, ?, ?)', data)
            else:
                # In the case of a silent error like a bad geographical region set offset to 20 to move to next zip
                offset = 20

# Remove duplicate records
functions.remove_dupes('id', 'shelters', cur)
