import requests
import hashlib
import sqlite3
import csv
import time
import pdb # Used for debugging
import functions
from lxml import etree


base_url = 'http://api.petfinder.com/'
key = '73a7bdb2d6fb6ff6fbf2ce0795109a58'
secret = '79e4470e7e285d7ff90d08b4939eb16d'

# Toggle to grab pets by shelter or by zip
# Change only shelters_or_zips to toggle between the two
shelters_or_zips = 'zips'
if shelters_or_zips == 'shelters':
    keycol = 'id'
    status_lst = ['A', 'H', 'P', 'X']
else:
    keycol = 'zip'
    status_lst = ['A'] # Not used when pulling by zip, just need a dummy value


# Create a connection to a sqlite db
con = sqlite3.connect('/Users/jonathan.braus/Documents/Petfinder/petfinder.db')
cur = con.cursor()
cur2 = con.cursor()

# Create pets and pets_temp tables
cur.execute('CREATE TABLE IF NOT EXISTS pets (id, shelterID, shelterPetId, name, animal, breeds, mix, age, sex, size, options, lastUpdate, status, zip, date, adopt_date)')
cur.execute('CREATE TABLE IF NOT EXISTS pets_temp (id, shelterID, shelterPetId, name, animal, breeds, mix, age, sex, size, options, lastUpdate, status, zip, date)')

run_date = time.strftime('%x')

# Determine where last run left off in the event an API limit was reached
last_run = cur.execute('SELECT * FROM last_run').fetchone()

# Get list of zips
if last_run is not None and last_run[3] == 'Limit Reached':
    iterator = cur.execute('SELECT ' + keycol + ',rowid FROM ' + shelters_or_zips + ' WHERE zip >= ' + last_run[0])
else:
    iterator = cur.execute('SELECT ' + keycol + ',rowid FROM ' + shelters_or_zips)
    
# Variable to indicate whether my daily API limit has been reached
limit_exceeded = 0

counter = 0
for iter in iterator:
    iter_str = iter[0]
    counter = counter + 1

    # Exit program early if API limit has been reached
    if limit_exceeded == 1:
        print('API Limit Reached')
        break

    # Call each shelter, once for each status A, H, P, and X
    for status in status_lst:
        print('shelter/zip ' + iter_str + ' status ' + status + ' row id ' + str(counter))
        offset = 0

        # Make the API call
        count = 1
        if shelters_or_zips == 'shelters':
            full_url = base_url + 'shelter.getPets'
            params = {'key': key, 'offset': offset, 'count': count, 'id': iter_str, 'status': status}
        else:
            full_url = base_url + 'pet.find'
            params = {'key': key, 'offset': offset, 'count': count, 'animal': 'dog', 'location': iter_str}
        
        
        response = requests.get(full_url, params=params)
        
        
        # Make sure API didn't throw an error and there is a non-empty response
        # Seen cases where response.content returns emtpy byte string b'' but does not equal None
        if len(response.content) > 0 and 'Error' not in  response.reason:

            root = etree.fromstring(response.content)
     
            # Check for error message
            msg = root.xpath('//message')[0].text
            
            if msg == 'exceeded daily request limit':
                limit_exceeded = 1
                # Table last_run records information on the last zip ran.  Tells us where to pick up again on the next run.
                cur.execute('DELETE FROM last_run')
                cur.execute('INSERT INTO last_run VALUES (?, ?, ?, ?)', (iter_str, counter, run_date, 'Limit Reached'))
                break
            else:
                # Get lastOffset value
                offset_element = root.find('lastOffset')

                
                if offset_element is not None and offset_element.text is not None:
                    offset = int(offset_element.text)

                    # Iterate through list of pets and prep for db insert    
                    pets = root.xpath('//pet')  # Returns a list with one entry per pet
                    data =[]
                    for pet in pets:
                        row_data = []
                        for field in pet.iterchildren():                                
                            if field.tag not in ('media', 'description'):
                                # Extract zip from shelter's contact info
                                if field.tag == 'contact':
                                    zip = field.find('zip')
                                    row_data.append(functions.xstr(zip.text))
                                # Loop over and concatenate each breed in breeds
                                elif field.tag == 'breeds':
                                    breeds = []
                                    for breed in field.iterchildren():
                                        breeds.append(breed.text)
                                    row_data.append(','.join(breeds))
                                else:
                                    row_data.append(functions.xstr(field.text))
                        # Add run_date as the date record of row_data
                        row_data.append(run_date)
                        # Insert a blank value for adopt_date
                        #row_data.append(run_date)
                        # Convert row_data to tuple and add it to data
                        data.append(tuple(row_data))
                        
                    
                    # Insert pet data into pets db
                    cur2.executemany('INSERT INTO pets_temp VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', data)

  
# Remove duplicate records
functions.remove_dupes('id', 'pets', cur)

# Record a successful completion in last_run table
if limit_exceeded != 1:
    cur.execute('DELETE FROM last_run')
    cur.execute('INSERT INTO last_run VALUES (?, ?, ?, ?)', ('','','','Completed'))

    # Update adopt_date for those pets no longer in db
    cur.execute('UPDATE pets SET pets.adopt_date = pets_temp.date FROM pets LEFT JOIN pets_temp ON pets.id = pets_temp.id WHERE pets_temp.id IS NULL')

    # Merge new pets into pets table
    cur.execute('INSERT INTO pets SELECT * FROM pets_temp LEFT JOIN pets ON pets.id = pets_temp.id WHERE pets.id IS NULL')
   
# Commit changes to the db
con.commit()
cur.close()
cur2.close()
con.close()

